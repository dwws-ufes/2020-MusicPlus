package br.ufes.informatica.musicplus.core.controller;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.enterprise.inject.Model;

import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Resource;

import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;
import br.ufes.informatica.musicplus.core.application.ArtistaService;
import br.ufes.informatica.musicplus.core.application.MusicaService;
import br.ufes.informatica.musicplus.core.application.SugestaoService;
import br.ufes.informatica.musicplus.core.domain.TipoGenero;
import br.ufes.informatica.musicplus.core.domain.TipoPais;
import br.ufes.informatica.musicplus.core.domain.ArtistaExterno;
import br.ufes.informatica.musicplus.core.domain.Artista;
import br.ufes.informatica.musicplus.core.domain.Musica;
import br.ufes.informatica.musicplus.core.domain.MusicaExterna;

/** TODO: generated by FrameWeb. Should be documented. */
@Model
@SessionScoped
public class ArtistaController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private SugestaoService sugestaoService;

	@EJB
	private ArtistaService artistaService ;
	
	@EJB
	private MusicaService musicaService ;
	
	/** TODO: generated by FrameWeb. Should be documented. */
	private List<Artista> artistas;
	
	private List<ArtistaExterno> artistasExternos;

	/** TODO: generated by FrameWeb. Should be documented. */
	private Integer numSugestoes;

	/** TODO: generated by FrameWeb. Should be documented. */
	private String porRankingOuAleatorio;

	private TipoPais nacionalidade;
	
	private int numVezesFavoritado;
	
	private TipoPais[] paisesEscolhidos;
	
	private TipoPais[] todosOsPaises;
	
	private TipoGenero[] generosEscolhidos;

	private TipoGenero[] todosOsGeneros ;
	
	private boolean allGeneros ;
	
	private boolean allPaises ;
	
	private Artista artistaEscolhido ;
	
	private ArtistaExterno artistaExternoEscolhido ;
	
	private List<Musica> musicas ;
	
	private List<MusicaExterna> musicasExternas;
	
	private MusicaExterna musicaExternaEscolhida;
	
	private String nomeArtista ;
	
	private Boolean editando ;

	private String mensagem ;
	
	private int page = 0;
	
	private int limit = 10;
	
	private int offset = 0;
	
	private boolean ultimaPaginaAlcancada = false;
	
	@PostConstruct
	public void init() {
		auxClean() ;
	}
	
	public void auxClean() {
		editando = false ;
		todosOsGeneros = TipoGenero.todos();
		todosOsPaises = TipoPais.todos();
		allGeneros = true ;
		allPaises = true; 
		paisesEscolhidos = null ;
		generosEscolhidos = null ;
		numSugestoes = null; 
		offset = offset + page*limit;
	}

	public boolean warningVazioGenero() {
		return (generosEscolhidos == null);
	}

	public boolean warningVazioPais() {
		return (paisesEscolhidos == null);
	}
	
	public Artista getArtistaEscolhido() {
		return artistaEscolhido;
	}

	public void setArtistaEscolhido(Artista artistaEscolhido) {
		this.artistaEscolhido = artistaEscolhido;
	}

	/** Getter for artistas. */
	public List<Artista> getArtistas() {
		return artistas;
	}

	/** Setter for artistas. */
	public void setArtistas(List<Artista> artistas) {
		this.artistas = artistas;
	}

	/** Getter for numSugestoes. */
	public Integer getNumSugestoes() {
		return numSugestoes;
	}

	/** Setter for numSugestoes. */
	public void setNumSugestoes(Integer numSugestoes) {
		this.numSugestoes = numSugestoes;
	}

	/** Getter for porRankingOuAleatorio. */
	public String getPorRankingOuAleatorio() {
		return porRankingOuAleatorio;
	}

	/** Setter for porRankingOuAleatorio. */
	public void setPorRankingOuAleatorio(String porRankingOuAleatorio) {
		this.porRankingOuAleatorio = porRankingOuAleatorio;
	}

	public TipoPais[] getPaisesEscolhidos() {
		return paisesEscolhidos;
	}

	public void setPaisesEscolhidos(TipoPais[] paisesEscolhidos) {
		this.paisesEscolhidos = paisesEscolhidos;
	}

	public TipoPais[] getTodosOsPaises() {
		return todosOsPaises;
	}

	public TipoGenero[] getGenerosEscolhidos() {
		return generosEscolhidos;
	}

	public void setGenerosEscolhidos(TipoGenero[] generosEscolhidos) {
		this.generosEscolhidos = generosEscolhidos;
	}

	public TipoGenero[] getTodosOsGeneros() {
		return todosOsGeneros;
	}
	
	public void escolherTodosOsGeneros() {
		if (allGeneros == true) {
			generosEscolhidos = todosOsGeneros ;
		}else {
			generosEscolhidos = null ;
		}
	}
	
	public void dispensarTodosOsGeneros() {
		allGeneros = false ;
		if (generosEscolhidos == null) {
			return ;
		}
		if (generosEscolhidos.length == 0) {
			return ;
		}
		allGeneros = true ;
		if (generosEscolhidos.length != todosOsGeneros.length) {
			allGeneros = false ;
		}
		return ;
	}
	
	public void escolherTodosOsPaises() {
		if (allPaises == true) {
			paisesEscolhidos = todosOsPaises ;
		}else {
			paisesEscolhidos = null ;
		}
	}
	
	public void dispensarTodosOsPaises() {
		allPaises = false ;
		if (paisesEscolhidos == null) {
			return ;
		}
		if (paisesEscolhidos.length == 0) {
			return ;
		}
		allPaises = true ;
		if (paisesEscolhidos.length != todosOsPaises.length) {
			allPaises = false ;
		}
		return ;
	}

	public boolean isAllGeneros() {
		return allGeneros;
	}

	public void setAllGeneros(boolean allGeneros) {
		this.allGeneros = allGeneros;
	}

	public boolean isAllPaises() {
		return allPaises;
	}

	public void setAllPaises(boolean allPaises) {
		this.allPaises = allPaises;
	}

	public void auxSugestaoArtistaDefaults() {
		artistas = null ;
		artistaEscolhido = null ;
	}
	
	public String favoritar() {
		// IF (USUARIO AINDA NAO FAVORITOU ARTISTA){
		artistaEscolhido.incrementaNumVezesFavoritado();
		artistaService.save(artistaEscolhido);
		// }
		auxSugestaoArtistaDefaults() ;
		return paginaInicial();
	}
	
	public String paginaInicial() {
		return "/core/home/index.xhtml?faces-redirect=true" ;
	}
	
	public boolean desabilitarBotao() {
		return artistaEscolhido == null ;
	}
	
	public String buscarMusicaPorArtista() {
		musicas = musicaService.buscarPorArtista(artistaEscolhido); 
		return musicasEncontradas() ;
	}
	
	public String musicasEncontradas() {
		return "/core/buscar/MusicasDoArtista.xhtml?faces-redirect=true" ;
	}
	
	public String redirecionaCadastroArtista() {
		return "/core/cadastrar/Artista.xhtml?faces-redirect=true" ;
	}
	
	public String pedirSugestaoArtista() {
		if (generosEscolhidos == null || paisesEscolhidos == null) {
			artistas = null ;
		}else {
			List<TipoPais> paises = new ArrayList<TipoPais>(); 
			for (TipoPais p : paisesEscolhidos) {
				paises.add(p);
			}
			List<TipoGenero> generos = new ArrayList<TipoGenero>(); 
			for (TipoGenero g : generosEscolhidos) {
				generos.add(g);
			}
			artistas = sugestaoService.pedirSugestaoArtista(porRankingOuAleatorio, paises, allPaises, numSugestoes, generos, allGeneros);
		}
		//auxCleanForBuscarArtista();
		//auxCadastrarArtista();
		musicas = null ;
		artistaEscolhido = null ;
		return artistasEncontrados() ;
	}
	
	public String artistasEncontrados() {
		return "/core/buscar/ArtistasEncontrados.xhtml?faces-redirect=true" ;
	}
	
	public String artistasExternosEncontrados() {
		return "/core/buscar/ArtistasExternosEncontrados.xhtml?faces-redirect=true" ;
	}
	
	public String musicasExternasEncontradas() {
		return "/core/buscar/MusicasExternasEncontradas.xhtml?faces-redirect=true" ;
	}
	
	public String deleteArtista() {
		artistaService.delete(artistaEscolhido);
		artistas.remove(artistaEscolhido) ;
		artistaEscolhido = null ;
		return artistasEncontrados() ;
	}
	
	public String buscarArtistas() {
		artistaEscolhido = null ;
		if (nomeArtista != null && nomeArtista.trim() != null) {
			artistas = artistaService.buscarPorNome(nomeArtista);
		}else {
			artistas = artistaService.buscarTodosArtistas();
		}
		return artistasEncontrados() ;
	}

	public String buscarArtistasExternos() {
		setArtistaExternoEscolhido(null) ;
		artistasExternos = new ArrayList<ArtistaExterno>();
		if (nomeArtista != null && nomeArtista.trim() != null && nomeArtista.length() > 3) {
			String query = "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n"
					+ "SELECT ?uri\n"
					+ "WHERE {\n"
					+ String.format("?uri foaf:name \"%s\" .\n",nomeArtista)
					+ "}";
			String sparqlEndpoint = "http://dbtune.org/musicbrainz/sparql";
			QueryExecution queryExecution = QueryExecutionFactory.sparqlService(sparqlEndpoint,query);
			ResultSet results = queryExecution.execSelect();
			while(results.hasNext()) {
				QuerySolution querySolution = results.next();
				Resource resource = querySolution.getResource("uri");
				String uri = resource.toString();
				ArtistaExterno artistaExterno = new ArtistaExterno();
				artistaExterno.setName(nomeArtista);
				artistaExterno.setUri(uri);
				artistasExternos.add(artistaExterno);
			}
		}
		return artistasExternosEncontrados();
	}
	
	public String buscarMusicasPorArtistaExterno() {
		System.out.println(offset);
		musicasExternas = new ArrayList<MusicaExterna>();
		String query = "SELECT DISTINCT ?property ?isValueOf ?title ?length\n"
				+ "WHERE {\n"
				+ String.format("?isValueOf ?property <%s> .\n",artistaExternoEscolhido.getUri())
				+ "?isValueOf <http://purl.org/dc/elements/1.1/title> ?title .\n"
				+ "?isValueOf <http://purl.org/ontology/mo/length> ?length .\n"
				+ String.format("}LIMIT %s\n",limit)
				+ String.format("OFFSET %s",offset);
		String sparqlEndpoint = "http://dbtune.org/musicbrainz/sparql";
		QueryExecution queryExecution = QueryExecutionFactory.sparqlService(sparqlEndpoint,query);
		ResultSet results = queryExecution.execSelect();
		int contador = 1;
		while(results.hasNext()) {
			QuerySolution querySolution = results.next();
			Literal title = querySolution.getLiteral("title");
			Literal length = querySolution.getLiteral("length");
			int length_milli = length.getInt();
			String duracao = "---";
			if(length_milli>0) {
				long length_min = (length_milli / 1000) / 60;
				long length_sec = (length_milli / 1000) % 60;
				duracao = String.format("%d minutos e %d segundos", length_min, length_sec);
			}
			MusicaExterna musicaExterna = new MusicaExterna();
			musicaExterna.setName(title.getString());
			musicaExterna.setDuracao(duracao);
			musicasExternas.add(musicaExterna);
			contador = contador + 1;
		}
		if(contador < limit) {
			ultimaPaginaAlcancada = true;
		}
		else {
			ultimaPaginaAlcancada = false;
		}
		return musicasExternasEncontradas();
	}
	
	public void avancarPagina() {
		page = page + 1;
		offset = offset + limit;
		buscarMusicasPorArtistaExterno();
	}
	
	public void voltarPagina() {
		page = page - 1;
		offset = offset - limit;
		buscarMusicasPorArtistaExterno();
	}
	
	public String deletarMusicaExterna() {
		musicasExternas.remove(musicaExternaEscolhida);
		return musicasExternasEncontradas();
	}
	
	public String salvarArtista() {
		mensagem = "Você deixou de preencher o(s) seguinte(s) campo(s) obrigatório(s): " ;
		boolean limpo = true ;
		if (nomeArtista == null || nomeArtista.trim() == null){
			mensagem = mensagem + "Nome do Artista; " ;
			limpo = false ;
		}	
		if (nacionalidade == null){
			mensagem = mensagem + "Pais do Artista; " ;
			limpo = false ;
		}
		if (limpo){
			mensagem = null ;
			if (editando) {
				return salvarArtistaPasso2(artistaEscolhido) ;
			}else {
				return salvarArtistaPasso2(new Artista()) ;
			}
		}else{
			mensagem = mensagem.substring(0, mensagem.length() - 2);
			return redirecionaCadastroArtista() ;
		}
	}
	
	public String editar() {
		editando = true ;
		nomeArtista = artistaEscolhido.getNome() ;
		List<TipoGenero> aux = artistaEscolhido.getGenero() ;
		generosEscolhidos = aux.toArray(new TipoGenero[aux.size()]) ;
		nacionalidade = artistaEscolhido.getNacionalidade() ;
		return redirecionaCadastroArtista() ;
	}
		
	public String salvarArtistaPasso2(Artista artista) {
			if  (editando) {
				artista.getGenero().clear();
			}
			for (TipoGenero g : generosEscolhidos) {
				artista.addGenero(g);
			}
	    	artista.setNacionalidade(nacionalidade);
	    	artista.setNome(nomeArtista);
	    	if (!editando) {
	    		artista.setNumVezesFavoritado(0);
	    	}
	    	artistaService.save(artista);
			auxClean();
	    	return paginaInicial();
    }

	public List<Musica> getMusicas() {
		return musicas;
	}

	public void setMusicas(List<Musica> musicas) {
		this.musicas = musicas;
	}

	public String getNomeArtista() {
		return nomeArtista;
	}

	public void setNomeArtista(String nomeArtista) {
		this.nomeArtista = nomeArtista;
	}

	public TipoPais getNacionalidade() {
		return nacionalidade;
	}

	public void setNacionalidade(TipoPais nacionalidade) {
		this.nacionalidade = nacionalidade;
	}

	public int getNumVezesFavoritado() {
		return numVezesFavoritado;
	}

	public void setNumVezesFavoritado(int numVezesFavoritado) {
		this.numVezesFavoritado = numVezesFavoritado;
	}

	public Boolean getEditando() {
		return editando;
	}

	public String getMensagem() {
		return mensagem;
	}

	public void setEditando(Boolean editando) {
		this.editando = editando;
	}

	public void setMensagem(String mensagem) {
		this.mensagem = mensagem;
	}

	public ArtistaExterno getArtistaExternoEscolhido() {
		return artistaExternoEscolhido;
	}

	public void setArtistaExternoEscolhido(ArtistaExterno artistaExternoEscolhido) {
		this.artistaExternoEscolhido = artistaExternoEscolhido;
	}

	public List<ArtistaExterno> getArtistasExternos() {
		return artistasExternos;
	}

	public void setArtistasExternos(List<ArtistaExterno> artistasExternos) {
		this.artistasExternos = artistasExternos;
	}

	public List<MusicaExterna> getMusicasExternas() {
		return musicasExternas;
	}

	public void setMusicasExternas(List<MusicaExterna> musicasExternas) {
		this.musicasExternas = musicasExternas;
	}

	public MusicaExterna getMusicaExternaEscolhida() {
		return musicaExternaEscolhida;
	}

	public void setMusicaExternaEscolhida(MusicaExterna musicaExternaEscolhida) {
		this.musicaExternaEscolhida = musicaExternaEscolhida;
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public int getOffset() {
		return offset;
	}

	public void setOffset(int offset) {
		this.offset = offset;
	}

	public boolean isUltimaPaginaAlcancada() {
		return ultimaPaginaAlcancada;
	}

	public void setUltimaPaginaAlcancada(boolean ultimaPaginaAlcancada) {
		this.ultimaPaginaAlcancada = ultimaPaginaAlcancada;
	}
	
	
	
}