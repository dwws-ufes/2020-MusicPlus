package br.ufes.informatica.musicplus.core.controller;

import java.util.List;

import javax.ejb.EJB;
import javax.enterprise.inject.Model;

import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;
import br.ufes.informatica.musicplus.core.application.ArtistaService;
import br.ufes.informatica.musicplus.core.application.MusicaService;
import br.ufes.informatica.musicplus.core.domain.Artista;
import br.ufes.informatica.musicplus.core.domain.Musica;

/** TODO: generated by FrameWeb. Should be documented. */
@Model
public class MusicaController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private MusicaService musicaService;
	
	@EJB
	private ArtistaService artistaService;
	
	/** TODO: generated by FrameWeb. Should be documented. */
	private String nomeDoArtista;

	private Artista artistaEscolhido ;
	
	private Musica musicaEscolhida ;

	/** TODO: generated by FrameWeb. Should be documented. */
	private String nomeDaMusica;

	/** TODO: generated by FrameWeb. Should be documented. */
	private List<Musica> musicas;

	private Boolean desabilitarBotao ;
	
	public void init() {
		auxClean() ;
	}
	
	public void auxClean() {
		nomeDoArtista = null ;
		nomeDaMusica = null ;
		musicas = null ;
		desabilitarBotao = true ;
	}
	
	/** TODO: generated by FrameWeb. Should be documented. */
	
	
	public String buscarMusica() {
		if (nomeDoArtista == null) {
			musicas = musicaService.buscarPorNome(nomeDaMusica);
		}
		List<Artista> artistas = artistaService.buscarPorNome(nomeDoArtista);
		if (nomeDaMusica == null) {
			musicas = musicaService.buscarPorArtistas(artistas);
		}else {
			musicas = musicaService.buscarMusica(nomeDaMusica, artistas) ;
		}
		return musicasEncontradas();
	}
	
	public String musicasEncontradas() {
		return "/core/buscarMusica/MusicasEncontradas.xhtml" ;
	}
	
	public Artista getArtistaEscolhido() {
		return artistaEscolhido;
	}

	public void setArtistaEscolhido(Artista artistaEscolhido) {
		this.artistaEscolhido = artistaEscolhido;
	}

	public Musica getMusicaEscolhida() {
		return musicaEscolhida;
	}

	public void setMusicaEscolhida(Musica musicaEscolhida) {
		this.musicaEscolhida = musicaEscolhida;
	}

	public Boolean getDesabilitarBotao() {
		return desabilitarBotao;
	}

	public void setDesabilitarBotao(Boolean desabilitarBotao) {
		this.desabilitarBotao = desabilitarBotao;
	}
	
	public void habilitarBotao() {
		desabilitarBotao = false ;
	}
	
	public String buscarMusicaPorArtista() {
		musicas = musicaService.buscarPorArtista(artistaEscolhido); 
		return "/core/buscarMusica/MusicasEncontradas.xhtml" ;
	}

	/** Getter for nomeDoArtista. */
	public String getNomeDoArtista() {
		return nomeDoArtista;
	}

	/** Setter for nomeDoArtista. */
	public void setNomeDoArtista(String nomeDoArtista) {
		this.nomeDoArtista = nomeDoArtista;
	}

	/** Getter for nomeDaMusica. */
	public String getNomeDaMusica() {
		return nomeDaMusica;
	}

	/** Setter for nomeDaMusica. */
	public void setNomeDaMusica(String nomeDaMusica) {
		this.nomeDaMusica = nomeDaMusica;
	}

	public List<Musica> getMusicas() {
		return musicas;
	}

	public void setMusicas(List<Musica> musicas) {
		this.musicas = musicas;
	}


}