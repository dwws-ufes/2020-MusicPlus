package br.ufes.informatica.musicplus.core.application;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import br.ufes.informatica.musicplus.core.domain.Artista;
import br.ufes.informatica.musicplus.core.domain.Musica;
import br.ufes.informatica.musicplus.core.persistence.MusicaDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class MusicaServiceBean implements MusicaService {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private MusicaDAO musicaDAO;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public List<Musica> buscarMusica(String NomeDaMusica, List<Artista> artistas) {
		List<Musica> musicas1 = buscarPorNome(NomeDaMusica);
		List<Musica> musicas2 = buscarPorArtistas(artistas);
		return merge(musicas1, musicas2);
	}
	
	public List<Musica> buscarPorArtista(Artista artista){
		return musicaDAO.buscarPorArtista(artista);
	}
	
	public List<Musica> buscarPorArtistas(List<Artista> artistas){
		List<Musica> musicas = new ArrayList<Musica>();
		for (Artista a : artistas) {
			musicas.addAll(buscarPorArtista(a));
		}
		return convert(musicas);
	}
	
	public List<Musica> merge(List<Musica> musicas1, List<Musica> musicas2){
		return musicas1.stream()
			    .filter(musicas2::contains)
			    .collect(Collectors.toList());
	}
	
	public List<Musica> convert(List<Musica> musicas){
		return musicas.stream().distinct().collect(Collectors.toList());
	}
	
	public List<Musica> buscarPorNome(String NomeDaMusica) {
		return musicaDAO.buscarPorNome(NomeDaMusica);
	}
	
	public void save(Musica artista) {
		musicaDAO.save(artista);
	}

	@Override
	public List<Musica> buscarTodasMusicas() {
		return musicaDAO.retrieveAll();
	}

}